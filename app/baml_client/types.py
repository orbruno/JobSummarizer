# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (5)
# #########################################################################

class CompetenciesAndSkills(BaseModel):
    competency: str
    soft_skills: typing.List[str]
    hard_skills: typing.List[str]

class ContractDetails(BaseModel):
    type: str
    duration: str
    time_commitment: str
    work_mode: str

class JobPosting(BaseModel):
    title: str
    company: str
    location: str
    contract_details: "ContractDetails"
    language_skills: "LanguageSkills"
    description: str
    competencies_and_skills: typing.List["CompetenciesAndSkills"]
    roles: typing.List[str]
    recruiter_details: "RecruiterDetails"
    posting_date: str
    application_deadline: str
    salary_range: str
    benefits: typing.List[str]

class LanguageSkills(BaseModel):
    english_level: str
    german_level: str
    language_of_posting: str
    languages: str

class RecruiterDetails(BaseModel):
    name: str
    email: str
    phone: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
